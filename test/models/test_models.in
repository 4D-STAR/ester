#!@PYTHON@

from subprocess import call
import os
import sys
import tempfile

prefix = "@prefix@"
datadir = "@datadir@/ester/test/models/"
useHDF5 = @use_hdf5@
par1d = datadir+"1d.par"
par2d = datadir+"2d.par"

checks = []
checks.append(
        {'name'     : "Model #1",
         'input'    : "",
         'output'   : "model1.out",
         'args'     : "-M 5 -tol 1e-8 -maxit 100",
         'param'    : par1d,
         'cmd'      : "ester 1d",
         'ref'      : datadir+"out1",
         'template' : datadir+"template_1d"
         })
if useHDF5:
    checks.append(
            {'name'     : "Model #1 (with HDF5)",
             'input'    : "",
             'output'   : "model1.h5",
             'args'     : "-M 5 -tol 1e-8 -maxit 100",
             'param'    : par1d,
             'cmd'      : "ester 1d",
             'ref'      : datadir+"out1",
             'template' : datadir+"template_1d"
             })

checks.append(
        {'name'     : "Model #2",
         'input'    : "model1.out",
         'output'   : "model2.out",
         'args'     : "-M 5 -tol 1e-8 -maxit 10 -Omega_bk 0.5",
         'param'    : par2d,
         'cmd'      : "ester 2d",
         'ref'      : datadir+"out2",
         'template' : datadir+"template_2d"
         })
if useHDF5:
    checks.append(
            {'name'     : "Model #2 (with HDF5)",
             'input'    : "model1.h5",
             'output'   : "model2.h5",
             'args'     : "-M 5 -tol 1e-8 -maxit 10 -Omega_bk 0.5",
             'param'    : par2d,
             'cmd'      : "ester 2d",
             'ref'      : datadir+"out2",
             'template' : datadir+"template_2d"
             })

checks.append(
        {'name'     : "Model #3",
         'input'    : "model1.out",
         'output'   : "model3.out",
         'args'     : "-M 10 -tol 1e-8 -maxit 100 -Xc 0.5 " +
                      "-ndomains 16 -npts 20",
         'param'    : "",
         'cmd'      : "ester 1d",
         'ref'      : datadir+"out3",
         'template' : datadir+"template_1d"
         })
if useHDF5:
    checks.append(
            {'name'     : "Model #3 (with HDF5)",
             'input'    : "model1.h5",
             'output'   : "model3.h5",
             'args'     : "-M 10 -tol 1e-8 -maxit 100 -Xc 0.5 " +
                          "-ndomains 16 -npts 20",
             'param'    : "",
             'cmd'      : "ester 1d",
             'ref'      : datadir+"out3",
             'template' : datadir+"template_1d"
             })

checks.append(
        {'name'     : "Model #4",
         'input'    : "model3.out",
         'output'   : "model4.out",
         'args'     : "-tol 1e-8 -maxit 10 -Omega_bk 0.3",
         'param'    : par2d,
         'cmd'      : "ester 2d",
         'ref'      : datadir+"out4",
         'template' : datadir+"template_2d"
         })
if useHDF5:
    checks.append(
            {'name'     : "Model #4 (with HDF5)",
             'input'    : "model3.h5",
             'output'   : "model4.h5",
             'args'     : "-tol 1e-8 -maxit 10 -Omega_bk 0.3",
             'param'    : par2d,
             'cmd'      : "ester 2d",
             'ref'      : datadir+"out4",
             'template' : datadir+"template_2d"
             })


check_dir = tempfile.mkdtemp()

def compare(file1, file2):
    try:
        f1 = open(file1, "r");
    except:
        return False
    try:
        f2 = open(file2, "r");
    except:
        f1.close()
        return False
    if not f1.read() == f2.read():
        f1.close()
        f2.close()
        return False
    else:
        f1.close()
        f2.close()
        return True


try:
    os.chdir(check_dir)
except:
    print("Could not chdir to: " + check_dir)
    sys.exit(1)

par1d = datadir+"1d.par"
par2d = datadir+"2d.par"

def runCheck(check):
    print check['name']
    print "  run:\t\t", # we need the last comma to avoid newline
    sys.stdout.flush()

    cmd = check['cmd'] + " " + check['args'] + " -noplot"
    if check['param'] != "":
        cmd += " -p " + check['param']
    if check['input'] != "":
        cmd += " -i " + check['input']
    if check['output'] != "":
        cmd += " -o " + check['output']

    devnull = open("/dev/null", "w")
    code = call(cmd.split(), stdout=devnull)
    devnull.close()
    if code == 0:
        print "[OK]"
    else:
        print "[Failed]"
        sys.exit(1)

    print "  output:\t", # we need the last comma to avoid newline
    sys.stdout.flush()

    cmd = "ester output " + check['output']
    fin = open(check['template'], "r")
    checkFile = check['output']+".check"
    fout = open(checkFile, "w")
    code = call(cmd.split(), stdin=fin, stdout=fout)
    fin.close()
    fout.close()
    if code == 0:
        print "[OK]"
    else:
        print "[Failed]"
        sys.exit(1)

    print "  compare:\t", # we need the last comma to avoid newline
    sys.stdout.flush()

    fcmp = compare(checkFile, check['ref'])
    if fcmp == True:
        print "[OK]"
    else:
        print "[Failed]"
        sys.exit(1)

def clearCheck(check):
    os.remove(check['output'])
    checkFile = check['output']+".check"
    os.remove(checkFile)

map(runCheck, checks)
map(clearCheck, checks)
os.removedirs(check_dir)

print("---------- All tests OK ---------------");
