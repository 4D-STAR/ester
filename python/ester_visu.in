#!@PYTHON@

import numpy as np
import h5py
import matplotlib.pyplot as plt

class star:
    def __init__(self, fileName):
        f = h5py.File(fileName, 'r')
        self.G   = f['/star/G'][:]
        self.N2  = f['/star/N2'][:]
        self.T   = f['/star/T'][:]
        self.X   = f['/star/X'][:]
        self.eps = f['/star/nuc.eps'][:]
        self.p   = f['/star/p'][:]
        self.phi = f['/star/phi'][:]
        self.r   = f['/star/r'][:]
        self.rho = f['/star/rho'][:]
        self.th  = f['/star/th'][:]
        self.w   = f['/star/w'][:]
        self.z   = f['/star/z'][:]

        self.ndomains   = f['/star'].attrs['ndomains']
        self.npts       = f['/star'].attrs['npts']
        self.nth        = f['/star'].attrs['nth']
        self.nr         = f['/star'].attrs['nr']
        self.eos        = f['/star'].attrs['eos.name']
        self.opa        = f['/star'].attrs['opa.name']
        self.atm        = f['/star'].attrs['atm.name']
        self.nconv      = f['/star'].attrs['conv']
        self.R          = f['/star'].attrs['R']
        self.xif        = f['/star'].attrs['xif']

        r = self.r[:,range(self.ndomains)*self.npts]
        th = self.th
        th[0] = np.pi/2
        th[-1] = 0
        x = r * np.sin(th)
        y = r * np.cos(th)
        self.grid = (x, y)


    def plotDiffRotation(self, showDomains = 0):
        th = np.r_[[[np.pi/2]], self.th]
        th[-1] = 0
        r = np.r_[[self.r[0,:]], self.r]
        r = np.c_[r[:,0], r]

        th = th * np.ones(r.shape[1])

        x = r * np.sin(th)
        y = r * np.cos(th)

        w = self.w

        plt.pcolor(x, y, w)
        plt.pcolor(-x, y, w)
        plt.pcolor(x, -y, w)
        plt.pcolor(-x, -y, w)
        plt.colorbar()

        if showDomains == 1:
            self.drawDomains()
        plt.show()

    def plot(self, showDomains = 0):
        p = plt.subplot(221)
        self.drawXY(self.r[0,:], self.w[0,:])
        self.drawXY(self.r[-1,:], self.w[-1,:])
        p.set_title('w')
        p.legend(("equator", "pole"))
        if showDomains == 1:
            self.drawDomainsEq()

        p = plt.subplot(222)
        self.drawXY(self.r[0,:], self.N2[0,:])
        self.drawXY(self.r[-1,:], self.N2[-1,:])
        p.set_title('N2')
        p.legend(("equator", "pole"))
        if showDomains == 1:
            self.drawDomainsEq()

        p = plt.subplot(223)
        self.drawXY(self.r[0,:], self.T[0,:])
        self.drawXY(self.r[-1,:], self.T[-1,:])
        p.set_title('T')
        p.legend(("equator", "pole"))
        if showDomains == 1:
            self.drawDomainsEq()

        p = plt.subplot(224)
        self.drawXY(self.r[0,:], self.eps[0,:])
        self.drawXY(self.r[-1,:], self.eps[-1,:])
        p.set_title('eps')
        p.legend(("equator", "pole"))
        if showDomains == 1:
            self.drawDomainsEq()

        plt.show()

    def plotXY(self, x, y, showDomains = 0):
        self.drawXY(x, y)
        if showDomains == 1:
            self.drawDomainsEq()
        plt.show()

    def drawXY(self, x, y):
        plt.plot(x, y)

    def drawDomains(self):
        x, y = self.grid
        plt.plot(x, y, color='b')
        plt.plot(x, -y, color='b')
        plt.plot(-x, y, color='b')
        plt.plot(-x, -y, color='b')

    def drawDomainsEq(self):
        for x in self.r[0, np.arange(self.ndomains)*self.npts]:
            plt.axvline(x, color='grey')

    def plotMeridionalCirculation(self, showDomains = 0):
        th = self.th
        th[-1] = 0
        th[0] = np.pi/2
        r = self.r
        x = r * np.sin(th)
        y = r * np.cos(th)
        plt.contourf(x, y,
                self.G, 200, alpha=.5)
        plt.contourf(x, -y,
                self.G, 200, alpha=.5)
        plt.contourf(-x, y,
                self.G, 200, alpha=.5)
        plt.contourf(-x, -y,
                self.G, 200, alpha=.5)
        plt.colorbar()

        npts = self.G.shape[0]/2 # draw nth/2 isolines
        plt.contour(x, y,
                self.G, npts, colors='black', linewidth=.5)
        plt.contour(-x, y,
                self.G, npts, colors='black', linewidth=.5)
        plt.contour(x, -y,
                self.G, npts, colors='black', linewidth=.5)
        plt.contour(-x, -y,
                self.G, npts, colors='black', linewidth=.5)

        if showDomains == 1:
            self.drawDomains()
        plt.show()

    def show(self):
        plt.show()

if __name__ == "__main__":
    import sys
    for arg in sys.argv[1:]:
        s = star(arg)
        s.plot()
        s.plotMeridionalCirculation()
