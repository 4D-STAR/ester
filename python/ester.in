#!@PYTHON@

import numpy as _np
import matplotlib.pyplot as _plt
import ester_wrap as _wrapper

SIG_SB = 5.670400e-5;
K_BOL = 1.3806503e-16;
HYDROGEN_MASS = 1.67353249e-24;
A_RAD = 7.565767e-15;
GRAV = 6.67384e-8;
C_LIGHT = 2.99792458e10;

M_SUN = 1.9891e33;
R_SUN = 6.95508e10;
L_SUN = 3.8396e33;


def _to_numpy(s, name, nr, nth):
    cmd = 'ptr = s.%s' % name
    exec(cmd)
    tmp = _wrapper.doubleArray_frompointer(ptr.data())
    field = _np.zeros(shape=(nr, nth))
    for ir in range(0, nr):
        for it in range(0, nth):
            field[ir, it] = tmp[it*nr + ir]
    return field

def _mat_to_numpy(mat, nr, nth):
    tmp = _wrapper.doubleArray_frompointer(mat.data())
    field = _np.zeros(shape=(nr, nth))
    for ir in range(0, nr):
        for it in range(0, nth):
            field[ir, it] = tmp[it*nr + ir]
    return field

def _double_to_numpy(mat, nr, nth):
    tmp = _wrapper.doubleArray_frompointer(mat)
    field = _np.zeros(shape=(nr, nth))
    for ir in range(0, nr):
        for it in range(0, nth):
            field[ir, it] = tmp[it*nr + ir]
    return field

class star2d:

    def interp(self, f):
    # add points f(theta=0) and f(theta=pi/2) to  field f 
        r = _np.zeros(shape=(f.shape[0], self.nth+2))
        r[:, 1:self.nth+1] = f
        r[:, 0] = _np.dot(f, self.P_eq)[:, 0]
        r[:, -1] = _np.dot(f, self.P_po)[:, 0]
        return r

    def __init__(self, model, interpolate=True):
        self._s = _wrapper.star2d()

        if self._s.read(model):
            raise Exception('Failed reading `%s\'' % model)
        self._init_fields(interpolate)

    def _init_fields(self, interpolate=True):

        self.nr = self._s.nr
        self.nth = self._s.nth
        self.nex = self._s.nex
        self.ndomains = self._s.ndomains

        self.opa = self._s.opa.name
        self.eos = self._s.eos.name
        self.nuc = self._s.nuc.name

        P_eq            = _wrapper.matrix()
        self._s.map.leg.eval_00(_wrapper.ones(1, self.nth), _np.pi/2, P_eq)
        P_po            = _wrapper.matrix()
        self._s.map.leg.eval_00(_wrapper.ones(1, self.nth), 0.0, P_po)
        self.P_eq       = _mat_to_numpy(P_eq, self.nth, 1)
        self.P_po       = _mat_to_numpy(P_po, self.nth, 1)

        self.R          = self._s.R
        self.z          = _to_numpy(self._s, 'z', self.nr, 1)

        self.G          = _to_numpy(self._s, 'G', self.nr, self.nth)
        self.N2         = _to_numpy(self._s, 'N2()', self.nr, self.nth)
        self.T          = _to_numpy(self._s, 'T', self.nr, self.nth)
        self.X          = _to_numpy(self._s, 'comp.X()', self.nr, self.nth)
        self.Y          = _to_numpy(self._s, 'comp.Y()', self.nr, self.nth)
        self.Z          = _to_numpy(self._s, 'comp.Z()', self.nr, self.nth)
        self.eps        = _to_numpy(self._s, 'nuc.eps', self.nr, self.nth)
        self.p          = _to_numpy(self._s, 'p', self.nr, self.nth)
        self.phi        = _to_numpy(self._s, 'phi', self.nr, self.nth)
        self.phiex      = _to_numpy(self._s, 'phiex', self.nex, self.nth)
        self.rho        = _to_numpy(self._s, 'rho', self.nr, self.nth)
        self.w          = _to_numpy(self._s, 'w', self.nr, self.nth)
        self.Teff       = _mat_to_numpy(self._s.Teff(), 1, self.nth)
        self.gsup       = _mat_to_numpy(self._s.gsup(), 1, self.nth)
        self.I          = _mat_to_numpy(self._s.map.gl.I, self.nr, self.nth)
        self.G1         = _mat_to_numpy(self._s.eos.G1, self.nr, self.nth)
        self.cp         = _mat_to_numpy(self._s.eos.cp, self.nr, self.nth)
        self.del_ad     = _mat_to_numpy(self._s.eos.del_ad, self.nr, self.nth)
        self.G3_1       = _mat_to_numpy(self._s.eos.G3_1, self.nr, self.nth)
        self.cv         = _mat_to_numpy(self._s.eos.cv, self.nr, self.nth)
        self.prad       = _mat_to_numpy(self._s.eos.prad, self.nr, self.nth)
        self.chi_T      = _mat_to_numpy(self._s.eos.chi_T, self.nr, self.nth)
        self.chi_rho    = _mat_to_numpy(self._s.eos.chi_rho, self.nr, self.nth)
        self.d          = _mat_to_numpy(self._s.eos.d, self.nr, self.nth)
        self.s          = _mat_to_numpy(self._s.eos.s, self.nr, self.nth)
        self.vr         = _mat_to_numpy(self._s.vr, self.nr, self.nth)
        self.vt         = _mat_to_numpy(self._s.vt, self.nr, self.nth)

        if interpolate:
            self.G          = self.interp(self.G)
            self.N2         = self.interp(self.N2)
            self.T          = self.interp(self.T)
            self.X          = self.interp(self.X)
            self.Y          = self.interp(self.Y)
            self.Z          = self.interp(self.Z)
            self.eps        = self.interp(self.eps)
            self.p          = self.interp(self.p)
            self.phi        = self.interp(self.phi)
            self.phiex      = self.interp(self.phiex)
            self.rho        = self.interp(self.rho)
            self.w          = self.interp(self.w)
            self.Teff       = self.interp(self.Teff)
            self.gsup       = self.interp(self.gsup)
            self.I          = self.interp(self.I)
            self.G1         = self.interp(self.G1)
            self.cp         = self.interp(self.cp)
            self.del_ad     = self.interp(self.del_ad)
            self.G3_1       = self.interp(self.G3_1)
            self.cv         = self.interp(self.cv)
            self.prad       = self.interp(self.prad)
            self.chi_T      = self.interp(self.chi_T)
            self.chi_rho    = self.interp(self.chi_rho)
            self.d          = self.interp(self.d)
            self.s          = self.interp(self.s)
            self.vr         = self.interp(self.vr)
            self.vt         = self.interp(self.vt)


	self.Dt		= _to_numpy(self._s,'Dt',self.nth,self.nth) #theta derivative
        self.r          = _to_numpy(self._s, 'r', self.nr, self.nth)
        self.rt         = _np.dot(self.r,self.Dt)
        if interpolate:
            self.r          = self.interp(self.r)
            self.rt         = self.interp(self.rt)
        self.th         = _np.zeros(shape=(self.nth+2))
        self.th[1:self.nth+1] = _to_numpy(self._s, 'th', 1, self.nth)
        self.th[0] = _np.pi/2
        self.th         = _np.ones((self.nr, 1)) * self.th
        self.r          = self.r * self.R
        self.Rp         = self.R
        self.Re         = _mat_to_numpy(
                self._s.map.leg.eval_00(self._s.r.row(self.nr-1), _np.pi/2),
                self.nr, self.nth)[0, 0]*self.R
        self.D          = _mat_to_numpy(self._s.D.full_matrix(), self.nr, self.nth)
        self.Dt         = _to_numpy(self._s, 'Dt', self.nr, self.nth)
        self.Dt2        = _to_numpy(self._s, 'Dt2', self.nr, self.nth)
        self.xif        = _double_to_numpy(self._s.map.gl.xif, self.ndomains+1, 1)
        self._surff      = self._s.surff
        self.Omega_bk   = self._s.Omega_bk
        self.Omega      = self._s.Omega
        self.Omegac     = self._s.Omegac
        self.Xc         = self._s.Xc
        self.rhoc       = self._s.rhoc
        self.Tc         = self._s.Tc
        self.pc         = self._s.pc
        self.M          = self._s.M
        self.L          = self._s.luminosity()
        self.rex        = _to_numpy(self._s, 'rex', self.nex, self.nth) * self.R
        self.Mcore      = self._s.Mcore()
        self.Lz         = self._s.Lz()
        self.Lzcore     = self._s.Lzcore()
# It = weights for computing theta-integrals, since polar and equatorial points
# are used in the representation of the fields, the associated weights are zero
        self.It         = _np.zeros(shape=(1, self.nth+2))
        self.It[0, 1:self.nth+1] = _mat_to_numpy(self._s.map.leg.I_00, 1, self.nth)[0, :]
        self.It         = _np.reshape(self.It,self.nth+2)

        ones = _wrapper.ones(1, self.nth)
        te = _wrapper.zeros(self.nth, 1)
        self._s.map.leg.eval_00(ones, _np.pi/2, te)
        self.Te     = _mat_to_numpy(te, self.nth, 1)

        tp = _wrapper.zeros(self.nth, 1)
        self._s.map.leg.eval_00(ones, 0, tp)
        self.Tp     = _mat_to_numpy(tp, self.nth, 1)

    def apparent_luminosity(self, angle):
# use of the C++ function apparent_luminosity of the ester library
        return self._s.apparent_luminosity(float(angle)/180*_np.pi)/L_SUN

class star1d(star2d):
    def __init__(self, model):
        self._s = _wrapper.star1d()

        if self._s.read(model):
            raise Exception('Failed reading `%s\'' % model)

        self._init_fields(interpolate=False)
